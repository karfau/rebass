{
  "compilerOptions": {
    /* Basic Options */
    /* Enable incremental compilation */
    // "incremental": true,
    /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */
    "target": "es6",
    /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "module": "commonjs",
    /* Specify library files to be included in the compilation. */
    "lib": [
      "es6"
    ],
    /* Allow javascript files to be compiled. */
    "allowJs": true,
    /* Report errors in .js files. */
    "checkJs": true,
    /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "jsx": "preserve",
    /* Generates corresponding '.d.ts' file. */
    // "declaration": true,
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // "sourceMap": true,                     /* Generates corresponding '.map' file. */
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    /* Redirect output structure to the directory. */
    "outDir": "./dist",
    /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    "rootDir": "./src",
    // "composite": true,                     /* Enable project compilation */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
    /* Do not emit comments to output. */
    "removeComments": false,
    // "noEmit": true,                        /* Do not emit outputs. */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    /* Enable all strict type-checking options. */
    "strict": true,
    /* Raise error on expressions and declarations with an implied 'any' type. */
    "noImplicitAny": false,
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                /* Report errors on unused locals. */
    // "noUnusedParameters": true,            /* Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    /* List of folders to include type definitions from. */
    // "typeRoots": [],
    /* Type declaration files to be included in compilation.
    Needed to add this to avoid errors regarding certain files in `../../node_modules/...`
    Source for idea: https://stackoverflow.com/questions/35382157/typescript-build-getting-errors-from-node-modules-folder
    */
    "types": [
      "../../node_modules/typescript/lib/lib.es6"
    ],
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    "esModuleInterop": true,
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    /* Disallow inconsistently-cased references to the same file. */
    "forceConsistentCasingInFileNames": true
  },
  /* files to consider, the default is not enough in our case */
  "include": [
    "./src/**/*.*"
  ]
  /* Could be an option at some point in time, but not needed currently */
  //  "exclude": ["**/node_modules/**"]
}
